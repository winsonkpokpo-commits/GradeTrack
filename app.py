""" GradeTrack - Application Streamlit pour le suivi des notes et moyennes Version am√©lior√©e : √©dition en ligne, interface r√©organis√©e, export et sauvegarde. """

import streamlit as st import pandas as pd import matplotlib.pyplot as plt import io import os import uuid from typing import List, Dict, Any, Optional

--- Configuration ---

st.set_page_config(page_title="GradeTrack", layout="wide") CSV_PATH = "notes.csv" EXPECTED_COLS = ["id", "Eleve", "Matiere", "Note", "Coefficient", "Trimestre"]

Petite feuille de style (couleurs l√©g√®res)

st.markdown( """ <style> .app-header {font-size:28px; font-weight:700;} .small-muted {color: #6c757d; font-size:12px} </style> """, unsafe_allow_html=True, )

--- Fonctions utilitaires ---

def charger_donnees() -> List[Dict[str, Any]]: if os.path.exists(CSV_PATH): try: df = pd.read_csv(CSV_PATH) for col in EXPECTED_COLS: if col not in df.columns: df[col] = None df = df.reindex(columns=EXPECTED_COLS) # Assurer des types simples if not df.empty: df['Note'] = pd.to_numeric(df['Note'], errors='coerce') df['Coefficient'] = pd.to_numeric(df['Coefficient'], errors='coerce') return df.to_dict(orient="records") except Exception as e: st.warning(f"Erreur lors du chargement des donn√©es : {e}") return [] return []

def sauvegarder_donnees() -> None: try: df = pd.DataFrame(st.session_state.data) for col in EXPECTED_COLS: if col not in df.columns: df[col] = None df = df.reindex(columns=EXPECTED_COLS) tmp_path = CSV_PATH + ".tmp" df.to_csv(tmp_path, index=False) os.replace(tmp_path, CSV_PATH) except Exception as e: st.error(f"Erreur lors de la sauvegarde : {e}")

def ajouter_note(eleve: str, matiere: str, note: float, coef: float, trimestre: str) -> None: if not eleve or eleve.strip() == "": st.error("Nom d'√©l√®ve invalide") return if not matiere or matiere.strip() == "": st.error("Mati√®re invalide") return try: note_val = float(note) coef_val = float(coef) except Exception: st.error("Note ou coefficient invalide") return

nouvelle = {
    "id": str(uuid.uuid4()),
    "Eleve": eleve.strip(),
    "Matiere": matiere.strip(),
    "Note": note_val,
    "Coefficient": coef_val,
    "Trimestre": str(trimestre),
}
st.session_state.data.append(nouvelle)
sauvegarder_donnees()

def supprimer_note(note_id: str) -> None: original_len = len(st.session_state.data) st.session_state.data = [n for n in st.session_state.data if n.get("id") != note_id] if len(st.session_state.data) < original_len: sauvegarder_donnees() st.success("Note supprim√©e avec succ√®s") st.experimental_rerun() else: st.warning("ID non trouv√© : impossible de supprimer la note")

def calcul_moyenne(df: pd.DataFrame) -> Optional[float]: if df is None or df.empty: return None df = df.copy() df['Note'] = pd.to_numeric(df['Note'], errors='coerce') df['Coefficient'] = pd.to_numeric(df['Coefficient'], errors='coerce') df = df.dropna(subset=['Note', 'Coefficient']) total_coef = df['Coefficient'].sum() if total_coef == 0: return None weighted_sum = (df['Note'] * df['Coefficient']).sum() return float(weighted_sum / total_coef)

def couleur_moyenne(moy: Optional[float]) -> str: if moy is None: return "gray" if moy >= 16: return "green" if moy >= 12: return "orange" return "red"

--- Initialisation de l'√©tat ---

if 'data' not in st.session_state: st.session_state.data = charger_donnees()

Construire la liste d'√©l√®ves

eleves = sorted({d['Eleve'] for d in st.session_state.data if d.get('Eleve')}) eleves_with_option = ["-- Nouvel √©l√®ve --"] + eleves

Sidebar: contr√¥les globaux

st.sidebar.title("Contr√¥les") selected = st.sidebar.selectbox("üéì Choisir un √©l√®ve", options=eleves_with_option)

Cr√©ation d'un nouvel √©l√®ve

new_name = "" if selected == "-- Nouvel √©l√®ve --": new_name = st.sidebar.text_input("Nom du nouvel √©l√®ve") if st.sidebar.button("‚ûï Cr√©er l'√©l√®ve"): if not new_name or new_name.strip() == "": st.sidebar.warning("Entrez un nom valide.") elif new_name.strip() in eleves: st.sidebar.warning("Cet √©l√®ve existe d√©j√†.") else: eleves.append(new_name.strip()) st.session_state.data.append({ "id": str(uuid.uuid4()), "Eleve": new_name.strip(), "Matiere": "", "Note": 0.0, "Coefficient": 0.0, "Trimestre": "1", }) sauvegarder_donnees() st.sidebar.success(f"√âl√®ve '{new_name.strip()}' cr√©√©.") st.experimental_rerun()

R√©initialiser

if st.sidebar.button("üîÅ R√©initialiser toutes les donn√©es"): if st.sidebar.checkbox("Confirmer la suppression de toutes les donn√©es"): st.session_state.data = [] sauvegarder_donnees() st.sidebar.success("Toutes les donn√©es ont √©t√© supprim√©es.") st.experimental_rerun()

En-t√™te principal

st.markdown(f"<div class='app-header'>üìä GradeTrack ‚Äî Suivi des notes</div>", unsafe_allow_html=True) st.markdown("<div class='small-muted'>Interface am√©lior√©e ¬∑ √©dition en ligne ¬∑ export CSV</div>", unsafe_allow_html=True)

Tabs r√©organis√©s

tab_ajout, tab_tableau, tab_stats, tab_graph = st.tabs(["‚ûï Ajouter", "üßæ Tableau (√©dition)", "üìö Statistiques", "üìä Graphiques"])

--- Onglet Ajouter ---

with tab_ajout: st.subheader("Ajouter une note") if selected == "-- Nouvel √©l√®ve --" and not (new_name and new_name.strip()): st.info("Cr√©ez un nouvel √©l√®ve depuis la barre lat√©rale avant d'ajouter une note.") else: eleve_input = selected if selected == "-- Nouvel √©l√®ve --" and new_name and new_name.strip(): eleve_input = new_name.strip()

with st.form("form_ajout_note", clear_on_submit=True):
        matiere = st.text_input("Mati√®re")
        note = st.number_input("Note (0-20)", min_value=0.0, max_value=20.0, value=10.0, step=0.1)
        coef = st.number_input("Coefficient", min_value=0.1, max_value=10.0, value=1.0, step=0.1)
        trimestre = st.selectbox("Trimestre", ["1", "2", "3"]) 
        submit = st.form_submit_button("‚ûï Ajouter la note")

        if submit:
            if eleve_input in [None, "", "-- Nouvel √©l√®ve --"]:
                st.warning("Veuillez s√©lectionner ou cr√©er un √©l√®ve avant d'ajouter une note.")
            else:
                if not matiere or matiere.strip() == "":
                    st.warning("Veuillez entrer une mati√®re valide.")
                else:
                    ajouter_note(eleve_input, matiere.strip(), note, coef, trimestre)
                    st.success(f"Note ajout√©e pour {eleve_input} ‚Äî {matiere.strip()} : {note} (coef {coef})")
                    st.experimental_rerun()

--- Onglet Tableau (√©dition) ---

with tab_tableau: st.subheader("Tableau complet ‚Äî √©dition en ligne") if not st.session_state.data: st.info("Aucune donn√©e. Ajoutez des notes depuis l'onglet Ajouter.") else: df_all = pd.DataFrame(st.session_state.data) # Afficher le tableau √©ditable (conserver les ids) edited = st.data_editor(df_all, num_rows="dynamic", use_container_width=True)

col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("Enregistrer modifications"):
            # Nettoyage minimal et sauvegarde
            for col in EXPECTED_COLS:
                if col not in edited.columns:
                    edited[col] = None
            # Normaliser types
            edited['Note'] = pd.to_numeric(edited['Note'], errors='coerce')
            edited['Coefficient'] = pd.to_numeric(edited['Coefficient'], errors='coerce')
            st.session_state.data = edited.to_dict(orient='records')
            sauvegarder_donnees()
            st.success("Modifications enregistr√©es.")
            st.experimental_rerun()
    with col2:
        st.markdown("**Actions rapides :**")
        if st.button("Ajouter une ligne vide"):
            st.session_state.data.append({"id": str(uuid.uuid4()), "Eleve": "", "Matiere": "", "Note": 0.0, "Coefficient": 1.0, "Trimestre": "1"})
            sauvegarder_donnees()
            st.experimental_rerun()

--- Onglet Statistiques ---

with tab_stats: st.subheader("Statistiques par √©l√®ve / mati√®re") try: df = pd.DataFrame(st.session_state.data) except Exception: df = pd.DataFrame(columns=EXPECTED_COLS)

if df.empty:
    st.info("Pas encore de notes pour calculer des statistiques.")
else:
    # Moyennes globales par √©l√®ve
    eleve_list = sorted(df['Eleve'].dropna().unique())
    sel_eleve = st.selectbox("Choisir un √©l√®ve pour d√©tails", options=["Tous"] + eleve_list)
    if sel_eleve == "Tous":
        st.dataframe(df.groupby('Eleve').apply(lambda g: pd.Series({'Moyenne': calcul_moyenne(g), 'Nb Notes': len(g)})).reset_index())
    else:
        df_e = df[df['Eleve'] == sel_eleve]
        if df_e.empty:
            st.info("Pas de notes pour cet √©l√®ve.")
        else:
            stats = df_e.groupby('Matiere').apply(lambda g: pd.Series({'Moyenne': calcul_moyenne(g), 'Nb Notes': len(g), 'Total Coef': g['Coefficient'].sum()})).reset_index()
            st.dataframe(stats)

--- Onglet Graphiques ---

with tab_graph: st.subheader("Graphiques") try: df = pd.DataFrame(st.session_state.data) except Exception: df = pd.DataFrame(columns=EXPECTED_COLS)

if df.empty:
    st.info("Pas encore de notes pour afficher des graphiques.")
else:
    eleve_list = sorted(df['Eleve'].dropna().unique())
    eleve_choice = st.selectbox("Choisir un √©l√®ve", options=eleve_list)
    df_e = df[df['Eleve'] == eleve_choice]
    if df_e.empty:
        st.info("Pas de notes pour l'√©l√®ve choisi.")
    else:
        # √âvolution
        moy_trimestres = [calcul_moyenne(df_e[df_e['Trimestre'] == t]) or 0 for t in ['1', '2', '3']]
        fig1, ax1 = plt.subplots()
        ax1.plot(['1', '2', '3'], moy_trimestres, marker='o')
        ax1.set_ylim(0, 20)
        ax1.set_title("√âvolution des moyennes trimestrielles")
        st.pyplot(fig1)

        # Moyenne par mati√®re
        moy_matiere = df_e.groupby('Matiere').apply(calcul_moyenne)
        fig2, ax2 = plt.subplots()
        moy_matiere.plot(kind='bar', ax=ax2)
        ax2.set_ylim(0, 20)
        ax2.set_title("Moyenne par mati√®re")
        st.pyplot(fig2)

--- Export CSV pour l'√©l√®ve ou global ---

st.sidebar.markdown("---") st.sidebar.subheader("Export / Utilitaires") if st.sidebar.button("‚¨áÔ∏è Exporter tout (CSV)"): df_all = pd.DataFrame(st.session_state.data) buf = io.StringIO() df_all.to_csv(buf, index=False) st.sidebar.download_button("T√©l√©charger le CSV complet", buf.getvalue(), file_name="notes_all.csv", mime="text/csv")

st.sidebar.markdown("---") st.sidebar.markdown("Tips: Utilisez l'onglet 'Tableau' pour modifier en masse, puis 'Enregistrer modifications'.")

